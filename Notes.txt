# We can reconfigure vite server i.e we can change port number
-Default port number- 5173
in vite.config.js file:
- server:
{
    port:3000
}

# LifeCycle of Components:
==========================
Every component have life cycle events:
1) Mounting  (born-appears on screen)
2) Updating    (made changes)
3) Unmounting  (out of screen)

# useEffect: (side effect function)
===================================
- Whenever we want to perform some oprations based on LifeCycle of the Components.
- useEffect hook connected to lifecycle of Components

- when change state component rerender that triggers TO  update lifecycle and due to this useEffect called.
-useState and useEffect are not connected 

-USEeffect CALLED BY Default
-we can use dependency array 

useEffect(()=>
{
    // do something
},[dependency array])

//To call api when component loaded
for ex.. loading all chats when chat component loaded not all things that will create mess.

to remove component: conditional rendering

useEffect(() => {
    console.log("component mounted");

// This is called when component unmounted
 return () => {
      console.log("component mounted unmounted");
    };

  }, [third]);


# API Calling:
using fetch and .then
when use list of object using map give it unique key.

-you are passing list of elements that looks exactly same

when copy object(array) only address get copies instead use spread operator
[...arrayname]

-used to spread object and arrays

Example..
let arr1=[1,2,3,4,5];

let arr2=arr1;   // change in arr2 also can make change in arr1

let arr3=[...arr1]; // change int arr3 doesnt affect arr1

// same with the objects

# Form Handling:
whenever function is event listener then it has by default event object.

# for multiple input fields we can create we have create multiple state variables and functions.

-but instead of creating multiple we can create it in single

-whwenever we want to pass variable as a property of object you have ro use curly braces;

let n="hello"
let a={
  {n}:"world"
}

- obj=> : "hello":"world"

# ROUTING:
opening or accessing something based on path/route

# if you create route inside route that many outlets you have to use
 
 ex.. you want routes inside about to be load in about not in app component thats why you have to use outlet.
 -Responsibility to load child routes is of the Outlet component

 -In child routes dont pass /

 -state variable persist throughout the rerendering.
  - if normal variable changed and component rerender then it come back to initial state
  - And to maintain value of variable throughout the rerendering and dont want it to be state variable

  # state variable : value persist but causes rerender

  # normal variable : doesnt cause rerender but doesnt persist
  -value will persist and it will not cause rerender=> solution is useRef hook.

  -when we useRef variable do not take value directly but take in the form of object.

  let rvar=useRef(10);
  i.e rvar={current:10}

  - useRef used for dom manipulation

  -UseContext Hook work same as redux .both are used to pass data from parents to child indeeper level.It avoids props drilling and make data global.

  -Context is also work like a container which accessed by component.

  -UseContext hook helps to extract data from context
  -we can pass onlyone data at time i.e array of object or object
  -Global state management
  -redux instead very complex